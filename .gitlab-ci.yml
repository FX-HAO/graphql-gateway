variables:
  CONTAINER_DEV_IMAGE: $CI_REGISTRY_IMAGE:dev
  CONTAINER_TAG_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:prod

stages:
  - build
  - deploy

build:
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.git.shundaojia.com
  script:
    - docker build -t $CONTAINER_DEV_IMAGE .
    - docker push $CONTAINER_DEV_IMAGE
  stage: build
  only:
    - develop
  tags:
    - docker-builder

release-image:
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.git.shundaojia.com
  script:
    - docker build -t $CONTAINER_RELEASE_IMAGE .
    - docker push $CONTAINER_RELEASE_IMAGE
  stage: build
  only:
    - master
  tags:
    - docker-builder

deploy-test:
  variables:
    ACTIVE_ALI_MACHINE: '$$(docker-machine env ali)'
  before_script:
    # Install ssh-agent if not already installed, it is required by Docker.
    # (change apt-get to yum if you use a CentOS-based image)
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add <(echo "$SSH_PRIVATE_KEY")

    # For Docker builds disable host key checking. Be aware that by adding that
    # you are suspectible to man-in-the-middle attacks.
    # WARNING: Use this only with the Docker executor, if you use it with shell
    # you will overwrite your user's SSH config.
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    # In order to properly check the server's host key, assuming you created the
    # SSH_SERVER_HOSTKEYS variable previously, uncomment the following two lines
    # instead.
    # - mkdir -p ~/.ssh
    # - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'
  script:
    - >
      ssh -oStrictHostKeyChecking=no root@$DEPLOY_SERVER <<EOF
        cd shundaojia/shundao
        git pull origin master
        cp -R development/* ../
        cp -R scripts/* ../
        cd ~
        eval $ACTIVE_ALI_MACHINE
        cd shundaojia
        docker-compose pull graphql-gateway
        docker-compose up -d --no-deps graphql-gateway
        exit
      EOF
  stage: deploy
  only:
    - develop
  tags:
    - docker-builder
